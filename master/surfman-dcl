--- /dev/null
+++ b/ui/surfman.c
@@ -0,0 +1,190 @@
+#include "surfman.h"
+
+/* HACK: Offset at which we copy ds->surface if the buffer is not shared between the emulation and the guest. */
+#define HIDDEN_LFB_OFFSET   0xa00000
+
+static struct SurfmanState *ss = NULL;
+/*
+ * DisplayState is created by the "hardware" through graphic_console_init().
+ */
+
+/* Called every DisplayChangeListener::gui_timer_interval. */
+static void surfman_dpy_refresh(struct DisplayState *ds)
+{
+    (void) ds;
+    vga_hw_update();    /* "Hardware" updates the framebuffer. */
+}
+
+/* A rectangular portion of the framebuffer (Surface) of DisplayState /s/ has changed. */
+static void surfman_dpy_gfx_update(struct DisplayState *ds, int x, int y, int w, int h)
+{
+    if (!is_buffer_shared(ds->surface)) {
+        unsigned int linesize = ds_get_linesize(ds);     // Somehow, the pixman_image_t is 64b aligned ... always?
+        unsigned int Bpp = ds_get_bytes_per_pixel(ds);
+        uint8_t *dest = ss->vram_ptr + HIDDEN_LFB_OFFSET + y * linesize + x * Bpp;
+        uint8_t *src = ds_get_data(ds) + y * linesize + x * Bpp;
+        unsigned int i;
+
+        surfman_debug("update vram:%#"HWADDR_PRIx" src:%p dest:%p %d,%d (%dx%d).",
+                      ss->vram->addr, src, dest, x, y, w, h);
+        for (i = 0; i < h; ++i) {
+            memcpy(dest, src, w * Bpp);
+            dest += linesize;
+            src += linesize;
+        }
+    }
+}
+
+static void surfman_lfb_state_save(struct SurfmanState *ss)
+{
+    struct DisplayState *ds = ss->ds;
+
+    ss->current.width = ds_get_width(ds);
+    ss->current.height = ds_get_height(ds);
+    ss->current.linesize = ds_get_linesize(ds);
+    ss->current.format = surfman_get_format(ds_get_format(ds));
+    ss->current.addr = ss->vram->addr;
+}
+
+static int surfman_lfb_state_compare(const struct lfb_state *s, struct DisplayState *ds)
+{
+    hwaddr lfb_addr;
+
+    lfb_addr = is_buffer_shared(ds->surface) ? ss->vram->addr : ss->vram->addr + HIDDEN_LFB_OFFSET;
+    return !((s->width == ds_get_width(ds)) &&
+             (s->height == ds_get_height(ds)) &&
+             (s->linesize == ds_get_linesize(ds)) &&
+             (s->format == surfman_get_format(ds_get_format(ds))) &&
+             (s->addr == lfb_addr));
+}
+
+/* The geometry of the framebuffer (Surface) of DisplayState has changed. */
+static void surfman_dpy_gfx_resize(struct DisplayState *ds)
+{
+    struct msg_display_resize msg;
+    struct msg_empty_reply reply;
+
+    if (!surfman_lfb_state_compare(&ss->current, ds)) {
+        return;
+    }
+    msg.DisplayID = 0;  /* Not supported anyway. */
+    msg.width = ds_get_width(ds);
+    msg.height = ds_get_height(ds);
+    msg.linesize = ds_get_linesize(ds);
+    msg.format = surfman_get_format(ds_get_format(ds));
+    if (!msg.format) {
+        surfman_error("Unsupported pixel format `%#x'.", ds_get_format(ds));
+        return;
+    }
+
+    msg.fb_offset = 0;  // Legacy value ?
+    if (is_buffer_shared(ds->surface)) {
+        // VRAM is accessible through BAR0 and the linear framebuffer is accessible in it.
+        msg.lfb_addr = ss->vram->addr;
+        msg.lfb_traceable = 1;
+    } else {
+        msg.lfb_addr = ss->vram->addr + HIDDEN_LFB_OFFSET;
+        msg.lfb_traceable = 0;
+    }
+    surfman_info("resize %dx%d:%d -> %dx%d:%d%s %s %s.",
+                 ss->current.width, ss->current.height, ss->current.linesize,
+                 msg.width, msg.height, msg.linesize,
+                 msg.lfb_addr == ss->vram->addr ? " (shared)": "",
+                 ds->have_text ? "have text" : "",
+                 ds->have_gfx ? "have gfx" : "");
+
+    dmbus_send(ss->dmbus_service, DMBUS_MSG_DISPLAY_RESIZE, &msg, sizeof (msg));
+    dmbus_sync_recv(ss->dmbus_service, DMBUS_MSG_EMPTY_REPLY, &reply, sizeof (reply));
+    surfman_lfb_state_save(ss);
+}
+
+/* The framebuffer (Surface) address has changed.
+ * /!\ We don't have a specific RPC with Surfman for that, so recycle resize. */
+static void surfman_dpy_gfx_setdata(struct DisplayState *ds)
+{
+    surfman_dpy_gfx_resize(ds);
+}
+
+//static void surfman_dpy_gfx_copy(struct DisplayState *s, int src_x, int src_y,
+//                                 int dst_x, int dst_y, int w, int h);
+
+//static void surfman_dpy_text_cursor(struct DisplayState *s, int x, int y);
+//static void surfman_dpy_text_resize(struct DisplayState *s, int w, int h);
+//static void surfman_dpy_text_update(struct DisplayState *s, int x, int y, int w, int h);
+
+//static void surfman_dpy_mouse_set(struct DisplayState *s, int x, int y, int on);
+//static void surfman_dpy_cursor_define(struct DisplayState *s, QEMUCursor *cursor);
+
+static void surfman_dpy_get_display_limits(DisplayState *ds,
+                                           unsigned int *width_max, unsigned int *height_max,
+                                           unsigned int *stride_alignment)
+{
+    struct msg_display_get_info msg;
+    struct msg_display_info reply;
+
+    msg.DisplayID = 0;
+    dmbus_send(ss->dmbus_service, DMBUS_MSG_DISPLAY_GET_INFO, &msg, sizeof (msg));
+    dmbus_sync_recv(ss->dmbus_service, DMBUS_MSG_DISPLAY_INFO, &reply, sizeof (reply));
+
+    if (width_max)
+        *width_max = reply.max_xres;
+    if (height_max)
+        *height_max = reply.max_yres;
+    if (stride_alignment)
+        *stride_alignment = reply.align;
+
+    surfman_debug("display_limits: %ux%u stride aligned on %u.", *width_max, *height_max, *stride_alignment);
+}
+
+static void surfman_on_reconnect(void *opaque)
+{
+    surfman_dpy_gfx_resize(ss->ds);
+}
+
+static struct dmbus_ops surfman_dmbus_ops = {
+    .dom0_input_event = NULL,
+    .dom0_input_pvm = NULL,
+    .input_config = NULL,
+    .input_config_reset = NULL,
+    .display_info = NULL,
+    .display_edid = NULL,
+    .reconnect = surfman_on_reconnect
+};
+
+/* Initialize Surfman's change listener. */
+void surfman_display_init(DisplayState *ds)
+{
+    DisplayChangeListener *dcl;
+
+    surfman_info("Initialize Surfman display.");
+
+    ss = g_malloc0(sizeof (*ss));
+    ss->ds = ds;
+    ss->vram = xen_get_framebuffer();
+    if (!ss->vram) {
+        surfman_error("Could not recover VRAM MemoryRegion.");
+        goto err_vram;
+    }
+    ss->vram_ptr = memory_region_get_ram_ptr(ss->vram);
+    ss->dmbus_service = dmbus_service_connect(DMBUS_SERVICE_SURFMAN, DEVICE_TYPE_VESA, &surfman_dmbus_ops, ss);
+    if (!ss->dmbus_service) {
+        surfman_error("Could not initialize dmbus.");
+        goto err_dmbus;
+    }
+
+    dcl = g_malloc0(sizeof (*dcl));
+    dcl->idle = 0;
+    dcl->dpy_refresh = surfman_dpy_refresh;
+    dcl->dpy_gfx_update = surfman_dpy_gfx_update;
+    dcl->dpy_gfx_resize = surfman_dpy_gfx_resize;
+    dcl->dpy_gfx_setdata = surfman_dpy_gfx_setdata;
+    dcl->dpy_get_display_limits = surfman_dpy_get_display_limits;
+
+    register_displaychangelistener(ds, dcl);
+    return;
+
+err_dmbus:
+err_vram:
+    g_free(ss);
+}
+
--- /dev/null
+++ b/ui/surfman.h
@@ -0,0 +1,118 @@
+#ifndef _SURFMAN_H_
+# define _SURFMAN_H_
+
+#include "hw/xen.h"
+#include "ui/console.h"
+#include "xen-dmbus.h"
+#include "exec/memory.h"
+
+#define SURFMAN_DEBUG 0
+#define SURFMAN_FLAG "surfman-ui: "
+# define surfman_debug(fmt, ...)                            \
+    do {                                                    \
+        if (SURFMAN_DEBUG)                                  \
+            fprintf(stdout, SURFMAN_FLAG "%s:%d " fmt "\n", \
+                    __FILE__, __LINE__, ##__VA_ARGS__);     \
+    } while (0)
+#define surfman_info(fmt, ...) \
+    fprintf(stdout, SURFMAN_FLAG fmt "\n", ##__VA_ARGS__)
+#define surfman_warn(fmt, ...) \
+    fprintf(stderr, SURFMAN_FLAG "warning: " fmt "\n", ##__VA_ARGS__)
+#define surfman_error(fmt, ...) \
+    fprintf(stderr, SURFMAN_FLAG "error: " fmt "\n", ##__VA_ARGS__)
+
+/* Display on which a surface is drawn currently. */
+
+struct lfb_state {
+    unsigned int width;
+    unsigned int height;
+    unsigned int linesize;
+    FramebufferFormat format;
+    hwaddr addr;
+};
+struct SurfmanState {
+    struct DisplayState *ds;
+    dmbus_service_t dmbus_service;
+    MemoryRegion *vram;         // VRAM region hackishly recovered.
+    uint8_t *vram_ptr;		// Pointer to the vram mapped in the mapcache.
+    struct lfb_state current;
+};
+
+static inline FramebufferFormat surfman_get_format(pixman_format_code_t format)
+{
+    switch (format) {
+        /* 32b */
+        case PIXMAN_a8r8g8b8:
+        case PIXMAN_x8r8g8b8:
+            return FRAMEBUFFER_FORMAT_BGRX8888;	// TODO: Surfman does not care ?!
+        case PIXMAN_a8b8g8r8:
+        case PIXMAN_x8b8g8r8:
+            return 0;
+        case PIXMAN_b8g8r8a8:
+        case PIXMAN_b8g8r8x8:
+            return FRAMEBUFFER_FORMAT_BGRX8888;
+        case PIXMAN_x2r10g10b10:
+        case PIXMAN_a2r10g10b10:
+        case PIXMAN_x2b10g10r10:
+        case PIXMAN_a2b10g10r10:
+            return 0;
+
+    /* 24bpp formats */
+        case PIXMAN_r8g8b8:
+            return FRAMEBUFFER_FORMAT_RGB888;
+        case PIXMAN_b8g8r8:
+            return FRAMEBUFFER_FORMAT_BGR888;
+
+    /* 16bpp formats */
+        case PIXMAN_r5g6b5:
+            return FRAMEBUFFER_FORMAT_RGB565;
+        case PIXMAN_b5g6r5:
+            return FRAMEBUFFER_FORMAT_BGR565;
+        case PIXMAN_a1r5g5b5:
+        case PIXMAN_x1r5g5b5:
+            return FRAMEBUFFER_FORMAT_RGB555;
+        case PIXMAN_a1b5g5r5:
+        case PIXMAN_x1b5g5r5:
+            return FRAMEBUFFER_FORMAT_BGR555;
+
+        case PIXMAN_a4r4g4b4:
+        case PIXMAN_x4r4g4b4:
+        case PIXMAN_a4b4g4r4:
+        case PIXMAN_x4b4g4r4:
+            return 0;
+
+        /* 8bpp formats */
+        case PIXMAN_a8:
+        case PIXMAN_r3g3b2:
+        case PIXMAN_b2g3r3:
+        case PIXMAN_a2r2g2b2:
+        case PIXMAN_a2b2g2r2:
+        case PIXMAN_c8:
+        case PIXMAN_g8:
+        case PIXMAN_x4a4:
+//        case PIXMAN_x4c4:
+//        case PIXMAN_x4g4:
+
+        /* 4bpp formats */
+        case PIXMAN_a4:
+        case PIXMAN_r1g2b1:
+        case PIXMAN_b1g2r1:
+        case PIXMAN_a1r1g1b1:
+        case PIXMAN_a1b1g1r1:
+        case PIXMAN_c4:
+        case PIXMAN_g4:
+
+        /* 1bpp formats */
+        case PIXMAN_a1:
+        case PIXMAN_g1:
+
+        /* YUV formats */
+        case PIXMAN_yuy2:
+        case PIXMAN_yv12:
+        default:
+            return 0;
+    }
+}
+
+#endif /* !_SURFMAN_H_ */
+
--- a/xen-all.c
+++ b/xen-all.c
@@ -450,7 +450,7 @@ go_physmap:
     xc_domain_pin_memory_cacheattr(xen_xc, xen_domid,
                                    start_addr >> TARGET_PAGE_BITS,
                                    (start_addr + size) >> TARGET_PAGE_BITS,
-                                   XEN_DOMCTL_MEM_CACHEATTR_WB);
+                                   XEN_DOMCTL_MEM_CACHEATTR_WC);
 
     snprintf(path, sizeof(path),
              "/local/domain/0/device-model/%d/physmap/%"PRIx64"/device_model",
@@ -1457,6 +1457,12 @@ void xen_register_framebuffer(MemoryRegi
     framebuffer = mr;
 }
 
+/* HACK: Get the framebuffer MemoryRegion to setup Surfman's plugins. */
+MemoryRegion *xen_get_framebuffer(void)
+{
+    return framebuffer;
+}
+
 void xen_shutdown_fatal_error(const char *fmt, ...)
 {
     va_list ap;
--- a/configure
+++ b/configure
@@ -227,6 +227,7 @@ coroutine=""
 seccomp=""
 glusterfs=""
 virtio_blk_data_plane=""
+surfman="no"
 
 # parse CC options first
 for opt do
@@ -902,6 +903,10 @@ for opt do
   ;;
   --enable-virtio-blk-data-plane) virtio_blk_data_plane="yes"
   ;;
+  --enable-surfman) surfman="yes"
+  ;;
+  --disable-surfman) surfman="no"
+  ;;
   *) echo "ERROR: unknown option $opt"; show_help="yes"
   ;;
   esac
@@ -3402,6 +3407,7 @@ echo "seccomp support   $seccomp"
 echo "coroutine backend $coroutine_backend"
 echo "GlusterFS support $glusterfs"
 echo "virtio-blk-data-plane $virtio_blk_data_plane"
+echo "Surfman support   $surfman"
 echo "gcov              $gcov_tool"
 echo "gcov enabled      $gcov"
 
@@ -3806,6 +3812,13 @@ if test "$trace_default" = "yes"; then
   echo "CONFIG_TRACE_DEFAULT=y" >> $config_host_mak
 fi
 
+##########################################
+# Surfman support.
+if test "$surfman" = "yes"; then
+  # TODO: Depends on patches...
+  echo "CONFIG_SURFMAN=y" >> $config_host_mak
+fi
+
 echo "TOOLS=$tools" >> $config_host_mak
 echo "ROMS=$roms" >> $config_host_mak
 echo "MAKE=$make" >> $config_host_mak
--- a/include/sysemu/sysemu.h
+++ b/include/sysemu/sysemu.h
@@ -90,8 +90,8 @@ typedef enum DisplayType
     DT_CURSES,
     DT_SDL,
     DT_NOGRAPHIC,
+    DT_SURFMAN,
     DT_NONE,
-    DT_XEN /* XenClient: Xen Display */
 } DisplayType;
 
 extern int autostart;
@@ -104,6 +104,7 @@ typedef enum {
 extern int vga_interface_type;
 #define xenfb_enabled (vga_interface_type == VGA_XENFB)
 #define qxl_enabled (vga_interface_type == VGA_QXL)
+#define xt_enabled (vga_interface_type == VGA_XT)
 
 extern int graphic_width;
 extern int graphic_height;
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -501,6 +501,11 @@ static inline int vnc_display_pw_expire(
 };
 #endif
 
+#ifdef CONFIG_SURFMAN
+/* surfman.c */
+void surfman_display_init(DisplayState *ds);
+#endif
+
 /* curses.c */
 void curses_display_init(DisplayState *ds, int full_screen);
 
--- a/ui/Makefile.objs
+++ b/ui/Makefile.objs
@@ -14,6 +14,7 @@ common-obj-$(CONFIG_COCOA) += cocoa.o
 common-obj-$(CONFIG_CURSES) += curses.o
 common-obj-$(CONFIG_VNC) += $(vnc-obj-y)
 common-obj-$(CONFIG_XEN) += xen-input.o
+common-obj-$(CONFIG_SURFMAN) += surfman.o
 
 $(obj)/sdl.o $(obj)/sdl_zoom.o: QEMU_CFLAGS += $(SDL_CFLAGS) 
 
--- a/vl.c
+++ b/vl.c
@@ -186,7 +186,7 @@ int main(int argc, char **argv)
 static const char *data_dir;
 const char *bios_name = NULL;
 enum vga_retrace_method vga_retrace_method = VGA_RETRACE_DUMB;
-DisplayType display_type = DT_XEN;
+DisplayType display_type;
 static int display_remote;
 const char* keyboard_layout = NULL;
 ram_addr_t ram_size;
@@ -2224,6 +2224,13 @@ static DisplayType select_display(const
         fprintf(stderr, "Curses support is disabled\n");
         exit(1);
 #endif
+    } else if (strstart(p, "surfman", &opts)) {
+#ifdef CONFIG_SURFMAN
+        display = DT_SURFMAN;
+#else
+        fprintf(stderr, "Surfman support is disabled\n");
+        exit(1);
+#endif
     } else if (strstart(p, "none", &opts)) {
         display = DT_NONE;
     } else {
@@ -4283,9 +4290,12 @@ int main(int argc, char **argv, char **e
         cocoa_display_init(ds, full_screen);
         break;
 #endif
-    case DT_XEN:
+#if defined(CONFIG_SURFMAN)
+    case DT_SURFMAN:
         xen_input_init();
+        surfman_display_init(ds);
         break;
+#endif
     default:
         break;
     }
--- a/hw/xen.h
+++ b/hw/xen.h
@@ -66,6 +66,7 @@ void xen_modified_memory(ram_addr_t star
 
 struct MemoryRegion;
 void xen_register_framebuffer(struct MemoryRegion *mr);
+struct MemoryRegion *xen_get_framebuffer(void);
 
 #if defined(CONFIG_XEN) && CONFIG_XEN_CTRL_INTERFACE_VERSION < 400
 #  define HVM_MAX_VCPUS 32

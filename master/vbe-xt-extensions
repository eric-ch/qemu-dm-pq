--- a/hw/vga.c
+++ b/hw/vga.c
@@ -32,6 +32,10 @@
 #include "xen.h"
 #include "trace.h"
 
+#ifdef CONFIG_XEN
+# include "hw/xen.h"
+#endif
+
 //#define DEBUG_VGA
 //#define DEBUG_VGA_MEM
 //#define DEBUG_VGA_REG
@@ -619,6 +623,30 @@ uint32_t vbe_ioport_read_data(void *opaq
         val = s->vram_size / (64 * 1024);
     } else {
         val = 0;
+        if (!(s->vbe_regs[VBE_DISPI_INDEX_ENABLE] & VBE_DISPI_GETCAPS)) {
+            uint32_t u1, u2;
+            switch (s->vbe_index) {
+                case VBE_DISPI_EXT_INDEX_EDID_XRES:
+                    dpy_get_display_limits(s->ds, &val, &u1, &u2);
+                    break;
+                case VBE_DISPI_EXT_INDEX_EDID_YRES:
+                    dpy_get_display_limits(s->ds, &u1, &val, &u2);
+                    break;
+                case VBE_DISPI_EXT_INDEX_STRIDE_ALIGN:
+                    dpy_get_display_limits(s->ds, &u1, &u2, &val);
+                    break;
+#ifdef CONFIG_XEN
+                case VBE_DISPI_EXT_INDEX_32BPP_ONLY:
+                    val = xenstore_is_32bpp_only();
+                    break;
+                case VBE_DISPI_EXT_INDEX_LEGACY_RES_ONLY:
+                    val = xenstore_is_legacy_res_only();
+                    break;
+#endif /* CONFIG_XEN */
+                default:
+                    break;
+            }
+        }
     }
 #ifdef DEBUG_BOCHS_VBE
     printf("VBE: read index=0x%x val=0x%x\n", s->vbe_index, val);
@@ -690,11 +718,13 @@ void vbe_ioport_write_data(void *opaque,
                 s->vbe_regs[VBE_DISPI_INDEX_X_OFFSET] = 0;
                 s->vbe_regs[VBE_DISPI_INDEX_Y_OFFSET] = 0;
 
-                if (s->vbe_regs[VBE_DISPI_INDEX_BPP] == 4)
-                    s->vbe_line_offset = s->vbe_regs[VBE_DISPI_INDEX_XRES] >> 1;
-                else
-                    s->vbe_line_offset = s->vbe_regs[VBE_DISPI_INDEX_XRES] *
-                        ((s->vbe_regs[VBE_DISPI_INDEX_BPP] + 7) >> 3);
+                if (!s->vbe_ext_regs[VBE_DISPI_EXT_INDEX_STRIDE - VBE_DISPI_EXT_INDEX_START]) {
+                    if (s->vbe_regs[VBE_DISPI_INDEX_BPP] == 4)
+                        s->vbe_line_offset = s->vbe_regs[VBE_DISPI_INDEX_XRES] >> 1;
+                    else
+                        s->vbe_line_offset = s->vbe_regs[VBE_DISPI_INDEX_XRES] *
+                            ((s->vbe_regs[VBE_DISPI_INDEX_BPP] + 7) >> 3);
+                }
                 s->vbe_start_addr = 0;
 
                 /* clear the screen (should be done in BIOS) */
@@ -781,6 +811,16 @@ void vbe_ioport_write_data(void *opaque,
         default:
             break;
         }
+    } else if ((s->vbe_index >= VBE_DISPI_EXT_INDEX_START) &&
+        (s->vbe_index < VBE_DISPI_EXT_INDEX_START + VBE_DISPI_EXT_INDEX_NB)) {
+        switch (s->vbe_index) {
+            case VBE_DISPI_EXT_INDEX_STRIDE:
+                s->vbe_line_offset = val;
+                s->vbe_ext_regs[VBE_DISPI_EXT_INDEX_STRIDE - VBE_DISPI_EXT_INDEX_START] = val;
+                break;
+            default:
+                break;
+        }
     }
 }
 
--- a/hw/xen.h
+++ b/hw/xen.h
@@ -81,5 +81,7 @@ enum xenstore_pm_type {
 };
 
 int xenstore_update_power(enum xenstore_pm_type const type);
+bool xenstore_is_32bpp_only(void);
+bool xenstore_is_legacy_res_only(void);
 
 #endif /* QEMU_HW_XEN_H */
--- a/hw/xen_backend.c
+++ b/hw/xen_backend.c
@@ -933,3 +933,37 @@ int xenstore_update_power(enum xenstore_
 
     return xenstore_write_int(dompath, "power-state", type);
 }
+
+
+/****************************************************
+ * XenClient: VBE exstentions. */
+bool xenstore_is_32bpp_only(void)
+{
+    char *domain_path;
+    int val;
+
+    domain_path = xs_get_domain_path(xenstore, xen_domid);
+    if (!domain_path) {
+        return false;
+    }
+    if (xenstore_read_int(domain_path, "platform/restrictdisplaydepth", &val)) {
+        return false;
+    }
+    return (val == 32);
+}
+
+bool xenstore_is_legacy_res_only(void)
+{
+    char *domain_path;
+    int val;
+
+    domain_path = xs_get_domain_path(xenstore, xen_domid);
+    if (!domain_path) {
+        return false;
+    }
+    if (xenstore_read_int(domain_path, "platform/restrictdisplayres", &val)) {
+        return false;
+    }
+    return !!val;
+}
+
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -167,6 +167,9 @@ struct DisplayChangeListener {
     void (*dpy_mouse_set)(struct DisplayState *s, int x, int y, int on);
     void (*dpy_cursor_define)(struct DisplayState *s, QEMUCursor *cursor);
 
+    void (*dpy_get_display_limits)(struct DisplayState *s, unsigned int *width, unsigned int *height,
+                                   unsigned int *stride_alignment);
+
     QLIST_ENTRY(DisplayChangeListener) next;
 };
 
@@ -350,6 +353,28 @@ static inline bool dpy_cursor_define_sup
     return false;
 }
 
+static inline void dpy_get_display_limits(struct DisplayState *s, unsigned int *width, unsigned int *height,
+                                          unsigned int *stride_alignment)
+{
+    struct DisplayChangeListener *dcl;
+    unsigned int w, h, a;
+
+    *width = 1920;
+    *height = 1200;
+    *stride_alignment = 1;  /* HACK: Keep the biggest supported resolution and the smallest required stride alignment. */
+    QLIST_FOREACH(dcl, &s->listeners, next) {
+        if (dcl->dpy_get_display_limits) {
+            dcl->dpy_get_display_limits(s, &w, &h, &a);
+            if ((*width > w) || (*height > h)) {
+                *width = w;
+                *height = h;
+	    }
+            if (*stride_alignment < a)
+                *stride_alignment = a;
+        }
+    }
+}
+
 static inline int ds_get_linesize(DisplayState *ds)
 {
     return pixman_image_get_stride(ds->surface->image);
--- a/hw/vga_int.h
+++ b/hw/vga_int.h
@@ -45,9 +45,18 @@
 #define VBE_DISPI_INDEX_VIRT_HEIGHT     0x7
 #define VBE_DISPI_INDEX_X_OFFSET        0x8
 #define VBE_DISPI_INDEX_Y_OFFSET        0x9
-#define VBE_DISPI_INDEX_NB              0xa /* size of vbe_regs[] */
+#define VBE_DISPI_INDEX_NB              0xa  /* size of vbe_regs[] */
 #define VBE_DISPI_INDEX_VIDEO_MEMORY_64K 0xa /* read-only, not in vbe_regs */
 
+#define VBE_DISPI_EXT_INDEX_START           0xd
+#define VBE_DISPI_EXT_INDEX_STRIDE          (VBE_DISPI_EXT_INDEX_START + 0x0) /* 0xd */
+#define VBE_DISPI_EXT_INDEX_NB              0x1 /* size of vbe_ext_regs[] */
+#define VBE_DISPI_EXT_INDEX_EDID_XRES       (VBE_DISPI_EXT_INDEX_START + 0x1) /* 0xe -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_EDID_YRES       (VBE_DISPI_EXT_INDEX_START + 0x2) /* 0xf -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_STRIDE_ALIGN    (VBE_DISPI_EXT_INDEX_START + 0x3) /* 0x10 -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_32BPP_ONLY      (VBE_DISPI_EXT_INDEX_START + 0x4) /* 0x11 -- read-only, not in vbe_regs */
+#define VBE_DISPI_EXT_INDEX_LEGACY_RES_ONLY (VBE_DISPI_EXT_INDEX_START + 0x5) /* 0x12 -- read-only, not in vbe_regs */
+
 #define VBE_DISPI_ID0                   0xB0C0
 #define VBE_DISPI_ID1                   0xB0C1
 #define VBE_DISPI_ID2                   0xB0C2
@@ -127,6 +136,7 @@ typedef struct VGACommonState {
     /* bochs vbe state */
     uint16_t vbe_index;
     uint16_t vbe_regs[VBE_DISPI_INDEX_NB];
+    uint16_t vbe_ext_regs[VBE_DISPI_EXT_INDEX_NB];
     uint32_t vbe_start_addr;
     uint32_t vbe_line_offset;
     uint32_t vbe_bank_mask;
